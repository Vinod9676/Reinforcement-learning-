import numpy as np
import tensorflow as tf
from tensorflow import keras
from collections import deque
import random
import gym

class ReplayBuffer:
    def __init__(self, max_size):
        self.buffer = deque(maxlen=max_size)

    def add(self, experience):
        self.buffer.append(experience)

    def sample(self, batch_size):
        batch = random.sample(self.buffer, batch_size)
        return map(np.array, zip(*batch))

class DDQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size, self.action_size = state_size, action_size
        self.dqn = self._build_model()
        self.target_dqn = self._build_model()
        self.target_dqn.set_weights(self.dqn.get_weights())
        self.buffer, self.batch_size, self.gamma = ReplayBuffer(max_size=2000), 32, 0.99
        self.epsilon, self.min_epsilon, self.epsilon_decay = 1.0, 0.01, 0.995
        self.total_steps, self.target_update_frequency = 0, 100

    def _build_model(self):
        model = keras.Sequential([
            keras.layers.Dense(24, activation='relu', input_shape=(self.state_size,)),
            keras.layers.Dense(24, activation='relu'),
            keras.layers.Dense(self.action_size, activation='linear')
        ])
        model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001), loss='mse')
        return model

    def select_action(self, state):
        return random.randrange(self.action_size) if np.random.rand() <= self.epsilon else np.argmax(self.dqn.predict(np.expand_dims(state, axis=0))[0])

    def train(self):
        if len(self.buffer.buffer) < self.batch_size:
            return
        states, actions, rewards, next_states, dones = self.buffer.sample(self.batch_size)
        targets = self.dqn.predict(states)
        target_values = self.target_dqn.predict(next_states)
        for i in range(self.batch_size):
            targets[i][actions[i]] = rewards[i] if dones[i] else rewards[i] + self.gamma * np.amax(target_values[i])
        self.dqn.fit(states, targets, epochs=1, verbose=0)
        if self.epsilon > self.min_epsilon:
            self.epsilon *= self.epsilon_decay
        self.total_steps += 1
        if self.total_steps % self.target_update_frequency == 0:
            self.target_dqn.set_weights(self.dqn.get_weights())

    def remember(self, state, action, reward, next_state, done):
        self.buffer.add((state, action, reward, next_state, done))

    def save(self, name):
        self.dqn.save_weights(name)

def train_ddqn_agent():
    env = gym.make("CartPole-v1")
    agent = DDQNAgent(env.observation_space.shape[0], env.action_space.n)
    episodes = 100
    for episode in range(episodes):
        state, done = env.reset(), False
        while not done:
            action = agent.select_action(state)
            next_state, reward, done, _ = env.step(action)
            agent.remember(state, action, reward, next_state, done)
            state = next_state
            agent.train()
        if episode % 10 == 0:
            print(f"Episode: {episode}/{episodes}, Total Steps: {agent.total_steps}, Epsilon: {agent.epsilon:.2}")
    agent.save("ddqn_model.h5")

if __name__ == "__main__":
    train_ddqn_agent()
